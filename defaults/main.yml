---
postgresql_version: 11
postgresql_cluster_name: main
postgresql_repo_key_url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
postgresql_repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
postgresql_system_packages:
  - { pkg: "postgresql-{{ postgresql_version }}",                state: "present" }
  - { pkg: "postgresql-client-{{ postgresql_version }}",         state: "present" }
  - { pkg: "postgresql-contrib-{{ postgresql_version }}",        state: "present" }
  - { pkg: "postgresql-server-dev-{{ postgresql_version }}",     state: "present" }
  - { pkg: "postgresql-doc-{{ postgresql_version }}",            state: "present" }
  - { pkg: "postgresql-{{ postgresql_version }}-dbgsym",         state: "present" }
  - { pkg: "postgresql-{{ postgresql_version }}-hypopg",         state: "present" }
  - { pkg: "postgresql-{{ postgresql_version }}-repack",         state: "present" }
  - { pkg: "postgresql-{{ postgresql_version }}-pg-stat-kcache", state: "present" }
  - { pkg: "postgresql-plpython3-{{ postgresql_version }}",      state: "present" }

postgresql_home_dir: /var/lib/postgresql
postgresql_config_dir: "/etc/postgresql/{{ postgresql_version }}/{{ postgresql_cluster_name }}"
postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/{{ postgresql_cluster_name }}"
postgresql_port: "5432"

postgresql_databases:
  - { db: "template1", state: "present", encoding: "UTF8", lc_collate: "en_US.UTF-8", lc_ctype: "en_US.UTF-8", owner: "postgres", template: "template1" }

postgresql_users: []
# - {
#     name: "postgres",
#     password: "$ecretp@sswd",
#     state: "present",
#     conn_limit: -1,
#     db: "postgres",
#     encrypted: true,
#     expires: "infinity",
#     fail_on_user: true,
#     no_password_changes: false,
#     priv: "", # e.g. 'table:SELECT,INSERT,UPDATE'
#     role_attr_flags: "SUPERUSER"
#   }

postgresql_extensions:
  - { ext: "amcheck",            state: "present", db: "template1" }
  - { ext: "pageinspect",        state: "present", db: "template1" }
  - { ext: "pg_buffercache",     state: "present", db: "template1" }
  - { ext: "pg_freespacemap",    state: "present", db: "template1" }
  - { ext: "pg_prewarm",         state: "present", db: "template1" }
  - { ext: "pgrowlocks",         state: "present", db: "template1" }
  - { ext: "pg_stat_statements", state: "present", db: "template1" }
  - { ext: "pgstattuple",        state: "present", db: "template1" }
  - { ext: "pg_visibility",      state: "present", db: "template1" }
  - { ext: "pg_stat_kcache",     state: "present", db: "template1" }

postgresql_sysctl_conf:
  - { name: "vm.zone_reclaim_mode",           value: "0",       sysctl_set: "yes", state: "present", reload: "yes" }
  - { name: "kernel.sched_migration_cost_ns", value: "5000000", sysctl_set: "yes", state: "present", reload: "yes" }
  - { name: "kernel.sched_autogroup_enabled", value: "0",       sysctl_set: "yes", state: "present", reload: "yes" }
  - { name: "vm.swappiness",                  value: "1",       sysctl_set: "yes", state: "present", reload: "yes" }
# - { name: "vm.nr_hugepages",                value: "0",       sysctl_set: "yes", state: "present", reload: "yes" } #TODO: calc pages from ansible_memtotal_mb

postgresql_pgpass_conf: []
# - { host: "127.0.0.1", port: "{{ postgresql_port }}", database: "postgres", user: "postgres", password: "$ecretp@sswd" }

postgresql_hba_conf:
  - { type: "local", database: "all",         user: "postgres", address: "",             auth_method: "peer" }
  - { type: "local", database: "all",         user: "all",      address: "",             auth_method: "peer" }
  - { type: "host",  database: "all",         user: "all",      address: "127.0.0.1/32", auth_method: "md5"  }
  - { type: "host",  database: "all",         user: "all",      address: "::1/128",      auth_method: "md5"  }
  - { type: "local", database: "replication", user: "all",      address: "",             auth_method: "peer" }
  - { type: "host",  database: "replication", user: "all",      address: "127.0.0.1/32", auth_method: "md5"  }
  - { type: "host",  database: "replication", user: "all",      address: "::1/128",      auth_method: "md5"  }

postgresql_conf:
  - { guc: "archive_mode",                        value: "on",                                                       state: "present", context: "postmaster" } # Allows archiving of WAL files using archive_command.
  - { guc: "autovacuum_max_workers",              value: "8",                                                        state: "present", context: "postmaster" } # Sets the maximum number of simultaneously running autovacuum worker processes.
  - { guc: "cluster_name",                        value: "'{{ postgresql_version }}/{{ postgresql_cluster_name }}'", state: "present", context: "postmaster" } # Sets the name of the cluster, which is included in the process title.
  - { guc: "hot_standby",                         value: "on",                                                       state: "present", context: "postmaster" } # Allows connections and queries during recovery.
  - { guc: "huge_pages",                          value: "try",                                                      state: "present", context: "postmaster" } # Use of huge pages on Linux.
  - { guc: "listen_addresses",                    value: "'*'",                                                      state: "present", context: "postmaster" } # Sets the host name or IP address(es) to listen to.
  - { guc: "logging_collector",                   value: "on",                                                       state: "present", context: "postmaster" } # Start a subprocess to capture stderr output and/or csvlogs into log files.
  - { guc: "max_connections",                     value: "1000",                                                     state: "present", context: "postmaster" } # Sets the maximum number of concurrent connections.
  - { guc: "max_files_per_process",               value: "2000",                                                     state: "present", context: "postmaster" } # Sets the maximum number of simultaneously open files for each server process.
  - { guc: "max_replication_slots",               value: "10",                                                       state: "present", context: "postmaster" } # Sets the maximum number of simultaneously defined replication slots.
  - { guc: "max_wal_senders",                     value: "10",                                                       state: "present", context: "postmaster" } # Sets the maximum number of simultaneously running WAL sender processes.
  - { guc: "max_worker_processes",                value: "8",                                                        state: "present", context: "postmaster" } # Maximum number of concurrent worker processes.
  - { guc: "port",                                value: "{{ postgresql_port }}",                                    state: "present", context: "postmaster" } # Sets the TCP port the server listens on.
  - { guc: "shared_buffers",                      value: "{{ ( ansible_memtotal_mb * 0.25 )|int }}MB",               state: "present", context: "postmaster" } # Sets the number of shared memory buffers used by the server.
  - { guc: "shared_preload_libraries",            value: "'pg_stat_statements,pg_stat_kcache'",                      state: "present", context: "postmaster" } # Lists shared libraries to preload into server.
  - { guc: "superuser_reserved_connections",      value: "10",                                                       state: "present", context: "postmaster" } # Sets the number of connection slots reserved for superusers.
  - { guc: "track_activity_query_size",           value: "32767",                                                    state: "present", context: "postmaster" } # Sets the size reserved for pg_stat_activity.query, in bytes.
  - { guc: "wal_level",                           value: "replica",                                                  state: "present", context: "postmaster" } # Set the level of information written to the WAL.
  - { guc: "archive_command",                     value: "'/bin/true'",                                              state: "present", context: "sighup"     } # Sets the shell command that will be called to archive a WAL file.
  - { guc: "autovacuum",                          value: "on",                                                       state: "present", context: "sighup"     } # Starts the autovacuum subprocess.
  - { guc: "autovacuum_analyze_scale_factor",     value: "0.05",                                                     state: "present", context: "sighup"     } # Number of tuple inserts, updates, or deletes prior to analyze as a fraction of reltuples.
  - { guc: "autovacuum_naptime",                  value: "1min",                                                     state: "present", context: "sighup"     } # Time to sleep between autovacuum runs.
  - { guc: "autovacuum_vacuum_scale_factor",      value: "0.05",                                                     state: "present", context: "sighup"     } # Number of tuple updates or deletes prior to vacuum as a fraction of reltuples.
  - { guc: "autovacuum_work_mem",                 value: "-1",                                                       state: "present", context: "sighup"     } # Sets the maximum memory to be used by each autovacuum worker process.
  - { guc: "bgwriter_delay",                      value: "10ms",                                                     state: "present", context: "sighup"     } # Background writer sleep time between rounds.
  - { guc: "bgwriter_lru_maxpages",               value: "1000",                                                     state: "present", context: "sighup"     } # Background writer maximum number of LRU pages to flush per round.
  - { guc: "bgwriter_lru_multiplier",             value: "10",                                                       state: "present", context: "sighup"     } # Multiple of the average buffer usage to free per round.
  - { guc: "checkpoint_completion_target",        value: "0.9",                                                      state: "present", context: "sighup"     } # Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval.
  - { guc: "checkpoint_timeout",                  value: "1h",                                                       state: "present", context: "sighup"     } # Sets the maximum time between automatic WAL checkpoints.
  - { guc: "constraint_exclusion",                value: "partition",                                                state: "present", context: "user"       } # Enables the planner to use constraints to optimize queries.
  - { guc: "deadlock_timeout",                    value: "1s",                                                       state: "present", context: "superuser"  } # Sets the time to wait on a lock before checking for deadlock.
  - { guc: "effective_cache_size",                value: "{{ ( ansible_memtotal_mb * 0.75 )|int }}MB",               state: "present", context: "user"       } # Sets the planner's assumption about the size of the disk cache.
  - { guc: "fsync",                               value: "on",                                                       state: "present", context: "sighup"     } # Forces synchronization of updates to disk.
  - { guc: "full_page_writes",                    value: "on",                                                       state: "present", context: "sighup"     } # Writes full pages to WAL when first modified after a checkpoint.
  - { guc: "hot_standby_feedback",                value: "on",                                                       state: "present", context: "sighup"     } # Allows feedback from a hot standby to the primary that will avoid query conflicts.
  - { guc: "idle_in_transaction_session_timeout", value: "0",                                                        state: "present", context: "user"       } # Sets the maximum allowed duration of any idling transaction.
  - { guc: "log_autovacuum_min_duration",         value: "5s",                                                       state: "present", context: "sighup"     } # Sets the minimum execution time above which autovacuum actions will be logged.
  - { guc: "log_checkpoints",                     value: "on",                                                       state: "present", context: "sighup"     } # Logs each checkpoint.
  - { guc: "log_directory",                       value: "'/var/log/postgresql'",                                    state: "present", context: "sighup"     } # Sets the destination directory for log files.
  - { guc: "log_filename",                        value: "'postgresql-%Y-%m-%d.log'",                                state: "present", context: "sighup"     } # Sets the file name pattern for log files.
  - { guc: "log_line_prefix",                     value: "'%m [%p-%l] %q%u@%r/%d?app=%a %i '",                       state: "present", context: "sighup"     } # Controls information prefixed to each log line.
  - { guc: "log_lock_waits",                      value: "on",                                                       state: "present", context: "superuser"  } # Logs long lock waits.
  - { guc: "log_min_duration_statement",          value: "2s",                                                       state: "present", context: "superuser"  } # Sets the minimum execution time above which statements will be logged.
  - { guc: "log_min_messages",                    value: "warning",                                                  state: "present", context: "superuser"  } # Sets the message levels that are logged.
  - { guc: "log_rotation_age",                    value: "1d",                                                       state: "present", context: "sighup"     } # Automatic log file rotation will occur after N minutes.
  - { guc: "log_statement",                       value: "'ddl'",                                                    state: "present", context: "superuser"  } # Sets the type of statements logged.
  - { guc: "log_temp_files",                      value: "3MB",                                                      state: "present", context: "superuser"  } # Log the use of temporary files larger than this number of kilobytes.
  - { guc: "maintenance_work_mem",                value: "128MB",                                                    state: "present", context: "user"       } # Sets the maximum memory to be used for maintenance operations.
  - { guc: "max_parallel_workers_per_gather",     value: "2",                                                        state: "present", context: "user"       } # Sets the maximum number of parallel processes per executor node.
  - { guc: "max_wal_size",                        value: "4GB",                                                      state: "present", context: "sighup"     } # Sets the WAL size that triggers a checkpoint.
  - { guc: "min_wal_size",                        value: "320MB",                                                    state: "present", context: "sighup"     } # Sets the minimum size to shrink the WAL to.
  - { guc: "synchronous_commit",                  value: "on",                                                       state: "present", context: "user"       } # Sets the current transaction's synchronization level.
  - { guc: "track_activities",                    value: "on",                                                       state: "present", context: "superuser"  } # Collects information about executing commands.
  - { guc: "track_counts",                        value: "on",                                                       state: "present", context: "superuser"  } # Collects statistics on database activity.
  - { guc: "track_functions",                     value: "pl",                                                       state: "present", context: "superuser"  } # Collects function-level statistics on database activity.
  - { guc: "track_io_timing",                     value: "on",                                                       state: "present", context: "superuser"  } # Collects timing statistics for database I/O activity.
  - { guc: "update_process_title",                value: "on",                                                       state: "present", context: "superuser"  } # Updates the process title to show the active SQL command.
  - { guc: "wal_compression",                     value: "on",                                                       state: "present", context: "superuser"  } # Compresses full-page writes written in WAL file.
  - { guc: "wal_keep_segments",                   value: "10",                                                       state: "present", context: "sighup"     } # Sets the number of WAL files held for standby servers.
